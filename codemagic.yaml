workflows:
  android-release:
    name: Android Release Build
    environment:
      groups:
        - keystore  # Contains signing keys
      vars:
         GRADLE_OPTS: "-Dorg.gradle.daemon=false -Xmx4096m"
    scripts:
      - name: Set up local.properties
        script: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > android/local.properties
          echo "flutter.sdk=$FLUTTER_ROOT" >> android/local.properties    
      - name: Fix Gradle Wrapper
        script: |
          cd android
          gradle wrapper --gradle-version 8.0
          cd ..
      - name: Setup Java Environment
        script: |
          
          # Auto-detect Java installation
          echo "=== Java Environment Setup ==="
          JAVA_HOME=$(/usr/libexec/java_home -v 11 2>/dev/null || /usr/libexec/java_home -v 17 2>/dev/null)
          
          if [ -z "$JAVA_HOME" ]; then
            echo "ERROR: No compatible Java installation found"
            echo "Available Java versions:"
            /usr/libexec/java_home -V
            exit 1
          fi
          
          echo "âœ… Using JAVA_HOME: $JAVA_HOME"
          echo "JAVA_HOME=$JAVA_HOME" >> $CM_ENV
          
          # Verify Java installation
          echo "Java version info:"
          java -version 2>&1 | tee build/logs/java_version.log
          
          # Create build directory (corrected from your typo 'mkdr - build/long v')
          mkdir -p build/long
          
          echo "=== Directory Structure ==="
          echo "build/logs contents:"
          ls -la build/logs/
          echo "build/long contents:"
          ls -la build/long/
      - name: Verify Environment
        script: |
          echo "=== Environment Check ==="
          flutter doctor -v
          java -version
          echo "JAVA_HOME=$JAVA_HOME"
          ls -la "$JAVA_HOME/bin/java"

      # ======================
      # 2. GRADLE CONFIGURATION  
      # ======================
      - name: Configure Gradle
        script: |
          echo "=== Comprehensive Gradle Setup ==="
          cd android
          
          # 1. Ensure wrapper files exist
          if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
            echo "Regenerating missing Gradle wrapper..."
            flutter create --platforms android .
          fi

          # 2. Force Gradle 8.0
          sed -i.bak 's|distributionUrl=.*|distributionUrl=https\://services.gradle.org/distributions/gradle-8.0-all.zip|' gradle/wrapper/gradle-wrapper.properties
          
          # 3. Update Android Gradle Plugin
          sed -i.bak 's|com.android.tools.build:gradle:[0-9.]*|com.android.tools.build:gradle:8.0.0|' build.gradle
          
          # 4. Set Java compatibility
          echo "android { compileOptions { sourceCompatibility JavaVersion.VERSION_11; targetCompatibility JavaVersion.VERSION_11 } }" >> app/build.gradle
          
          # 5. Disable all Gradle analytics and scans
          echo -e "\n# Disable all telemetry\norg.gradle.enterprise.buildScan.publish.never=true\norg.gradle.analytics.askBeforeUpload=false" > gradle.properties
          echo "org.gradle.unsafe.configuration-cache=true" >> gradle.properties
          
          # 6. Verify setup
          echo "=== Final Configuration ==="
          echo "Gradle version:"
          cat gradle/wrapper/gradle-wrapper.properties | grep "distributionUrl"
          echo "Android Gradle Plugin:"
          grep "com.android.tools.build:gradle" build.gradle
          echo "Gradle properties:"
          cat gradle.properties | grep -i "scan\|analytics"
          
          # 7. Test wrapper
          ./gradlew --version || (echo "Gradle wrapper test failed!"; exit 1)
          cd ..

      # ======================
      # 3. DEPENDENCY RESOLUTION
      # ======================
      - name: Resolve Dependencies
        script: |
          echo "=== Dependency Check ==="
          flutter pub get
          cd android
          ./gradlew :app:dependencies --configuration releaseRuntimeClasspath > ../build/logs/dependencies.txt
          cd ..
          echo "Problematic dependencies:"
          grep -i "conflict\|incompatible" build/logs/dependencies.txt || echo "No conflicts found"

      # ======================
      # 4. BUILD PROCESS
      # ======================
      - name: Run Build with Debug
        script: |
          echo "=== Starting Build ===" | tee build/logs/build.log
          echo "Disabling Gradle scans permanently..."
            echo -e "\n# Disable build scans\norg.gradle.enterprise.buildScan.publish.never=true" >> android/gradle.properties
            echo "org.gradle.unsafe.configuration-cache=true" >> android/gradle.properties
            cat android/gradle.properties | grep -i scan  # Verify
                          
          # Run Gradle build with proper log handling
          cd android
          {
            ./gradlew clean assembleRelease \
              --no-scan \
              --no-daemon \
              -Dorg.gradle.enterprise.buildScan.publish.never=true \
              -Dorg.gradle.analytics.askBeforeUpload=false \
              -Dorg.gradle.configureondemand=true 
          } || {
            echo "=== GRADLE BUILD FAILED ===" | tee -a ../build/logs/build.log
            echo "Last 50 lines:" | tee -a ../build/logs/build.log
            tail -n 50 ../build/logs/gradle.log | tee -a ../build/logs/build.log
            echo "Relevant errors:" | tee -a ../build/logs/build.log
            grep -A 20 -B 5 -i "error\|fail\|exception" ../build/logs/gradle.log | tee -a ../build/logs/build.log || true
            exit 1
          }
          cd ..
          
          # Run Flutter build
          {
            flutter build apk --release --verbose 2>&1 | tee build/logs/flutter.log
          } || {
            echo "=== FLUTTER BUILD FAILED ===" | tee -a build/logs/build.log
            tail -n 50 build/logs/flutter.log | tee -a build/logs/build.log
            exit 1
          }

      # ======================
      # 5. ARTIFACT VERIFICATION
      # ======================
      - name: Verify and Package Artifacts
        script: |
          echo "=== Artifact Verification ==="
          if [ ! -d "build/app/outputs/flutter-apk" ]; then
            echo "ERROR: No APK directory found!"
            echo "Build outputs:"
            ls -la build/app/outputs/ || true
            exit 1
          fi
          
          mkdir -p build/outputs/apk
          if ls build/app/outputs/flutter-apk/*.apk >/dev/null 2>&1; then
            cp build/app/outputs/flutter-apk/*.apk build/outputs/apk/
            echo "APKs copied:"
            ls -lh build/outputs/apk/
          else
            echo "ERROR: No APK files found in build/app/outputs/flutter-apk/"
            echo "Directory contents:"
            ls -la build/app/outputs/flutter-apk/ || true
            echo "Build logs:"
            grep -i "error\|fail" build/logs/*.log || true
            exit 1
          fi

    artifacts:
      - build/outputs/apk/*.apk
      - build/logs/**
      - android/gradle/wrapper/gradle-wrapper.properties
      - android/build.gradle
      - android/app/build.gradle

    publishing:
      email:
        recipients:
          - your.email@example.com
      scripts:
        - name: Build Report
          script: |
            echo "=== BUILD DIAGNOSTICS ==="
            echo "Gradle version:"
            cat android/gradle/wrapper/gradle-wrapper.properties | grep "distributionUrl"
            echo "Android Gradle Plugin:"
            grep "com.android.tools.build:gradle" android/build.gradle
            echo "Java compatibility:"
            grep "sourceCompatibility" android/app/build.gradle || echo "Using default Java version"
            echo "Dependency conflicts:"
            grep -i "conflict\|incompatible" build/logs/dependencies.txt || echo "No conflicts found"
            echo "APK info:"
            ls -lh build/outputs/apk/