workflows:
  android-release:
    name: Android Release Build
    environment:
      groups:
        - keystore
      vars:
        GRADLE_OPTS: "-Dorg.gradle.daemon=false -Xmx4096m"
    scripts:
      # ======================
      # 1. ENVIRONMENT SETUP (WITH DIRECTORY VERIFICATION)
      # ======================
      - name: Initialize Build Environment
        script: |
          echo "=== Initializing Build Environment ==="
          
          # Create ALL required directories first with verification
          mkdir -p build/logs build/outputs/apk
          if [ ! -d "build/logs" ] || [ ! -d "build/outputs/apk" ]; then
            echo "❌ CRITICAL: Directory creation failed!"
            echo "Current path: $(pwd)"
            echo "Disk space:"
            df -h .
            echo "Permissions:"
            ls -ld $(pwd) build
            exit 1
          fi
          
          # Store environment info
          {
            echo "=== Environment ==="
            flutter doctor -v
            java -version
            echo "JAVA_HOME: ${JAVA_HOME:-Not Set}"
          } > build/logs/environment.log 2>&1

      # ======================
      # 2. GRADLE CONFIGURATION
      # ======================
      - name: Configure Gradle
        script: |
          echo "=== Configuring Gradle ===" | tee -a build/logs/setup.log
          cd android || { echo "❌ Android directory missing!" | tee -a ../build/logs/setup.log; exit 1; }
          
          # Force Gradle 8.0
          sed -i.bak 's|distributionUrl=.*|distributionUrl=https\://services.gradle.org/distributions/gradle-8.0-all.zip|' gradle/wrapper/gradle-wrapper.properties
          
          # Update Android Gradle Plugin
          sed -i.bak 's|com.android.tools.build:gradle:[0-9.]*|com.android.tools.build:gradle:8.0.0|' build.gradle
          
          # Set Java 11 compatibility
          echo "android { compileOptions { sourceCompatibility JavaVersion.VERSION_11; targetCompatibility JavaVersion.VERSION_11 } }" >> app/build.gradle
          
          ./gradlew --version >> ../build/logs/setup.log 2>&1 || {
            echo "❌ Gradle verification failed!" | tee -a ../build/logs/setup.log
            exit 1
          }
          cd ..

      # ======================
      # 3. DEPENDENCY RESOLUTION
      # ======================
      - name: Resolve Dependencies
        script: |
          echo "=== Resolving Dependencies ===" | tee -a build/logs/dependencies.log
          flutter pub get >> build/logs/dependencies.log 2>&1
          cd android && ./gradlew :app:dependencies --configuration releaseRuntimeClasspath >> ../build/logs/dependencies.log 2>&1
          cd ..
          echo "=== Dependency Conflicts ===" | tee -a build/logs/dependencies.log
          grep -i "conflict\|incompatible" build/logs/dependencies.log || echo "No conflicts found" | tee -a build/logs/dependencies.log

      # ======================
      # 4. BUILD PROCESS (WITH ROBUST ERROR HANDLING)
      # ======================
      - name: Execute Build
        script: |
          echo "=== Starting Build Process ===" | tee -a build/logs/build.log
          flutter clean >> build/logs/build.log 2>&1
          rm -rf android/build >> build/logs/build.log 2>&1
          
          # Gradle build with guaranteed log handling
          cd android
          {
            ./gradlew clean assembleRelease \
              --no-daemon \
              --stacktrace \
              --info \
              --scan \
              --console=plain 2>&1 | tee ../build/logs/gradle.log
          } || {
            echo "=== GRADLE BUILD FAILURE ===" | tee -a ../build/logs/build.log
            [ -f "../build/logs/gradle.log" ] && {
              echo "Last 50 lines:" | tee -a ../build/logs/build.log
              tail -n 50 "../build/logs/gradle.log" | tee -a ../build/logs/build.log
              echo "Relevant errors:" | tee -a ../build/logs/build.log
              grep -A 20 -B 5 -i "error\|fail\|exception" "../build/logs/gradle.log" | tee -a ../build/logs/build.log
            }
            exit 1
          }
          cd ..
          
          # Flutter build
          {
            flutter build apk --release --verbose 2>&1 | tee build/logs/flutter.log
          } || {
            echo "=== FLUTTER BUILD FAILURE ===" | tee -a build/logs/build.log
            [ -f "build/logs/flutter.log" ] && tail -n 50 "build/logs/flutter.log" | tee -a build/logs/build.log
            exit 1
          }

      # ======================
      # 5. ARTIFACT VERIFICATION (WITH FILE EXISTENCE CHECKS)
      # ======================
      - name: Verify and Package Output
        script: |
          echo "=== Verifying Artifacts ===" | tee -a build/logs/artifacts.log
          if [ ! -d "build/app/outputs/flutter-apk" ]; then
            echo "❌ ERROR: APK directory missing!" | tee -a build/logs/artifacts.log
            echo "Build structure:" | tee -a build/logs/artifacts.log
            find build -type d | tee -a build/logs/artifacts.log
            exit 1
          fi
          
          mkdir -p build/outputs/apk
          if ls build/app/outputs/flutter-apk/*.apk >/dev/null 2>&1; then
            cp build/app/outputs/flutter-apk/*.apk build/outputs/apk/
            echo "✅ APKs generated:" | tee -a build/logs/artifacts.log
            ls -lh build/outputs/apk/ | tee -a build/logs/artifacts.log
          else
            echo "❌ ERROR: No APK files found!" | tee -a build/logs/artifacts.log
            echo "Directory contents:" | tee -a build/logs/artifacts.log
            ls -la build/app/outputs/flutter-apk/ | tee -a build/logs/artifacts.log
            exit 1
          fi

    artifacts:
      - build/outputs/apk/*.apk
      - build/logs/**
      - android/gradle/wrapper/gradle-wrapper.properties
      - android/build.gradle
      - android/app/build.gradle

    publishing:
      email:
        recipients:
          - your.email@example.com
      scripts:
        - name: Build Report
          script: |
            echo "=== BUILD DIAGNOSTICS ==="
            echo "Gradle version:"
            cat android/gradle/wrapper/gradle-wrapper.properties | grep "distributionUrl"
            echo "Android Gradle Plugin:"
            grep "com.android.tools.build:gradle" android/build.gradle
            echo "Critical errors:"
            grep -i "error\|fail\|exception" build/logs/*.log | tail -n 20 || echo "No critical errors found"
            echo "APK info:"
            ls -lh build/outputs/apk/